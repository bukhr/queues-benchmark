#!/usr/bin/env ruby
# original: https://raw.githubusercontent.com/chrismaximin/benchmark-sidekiq-and-activejob/master/bin/run_benchmarks

def log_message(message)
  unless ARGV[1].present?
    now = Time.now.utc
    puts "[#{now.to_s(:db)}.#{now.usec}] #{message}" 
  end
end

STDERR.sync = STDOUT.sync = true

puts "Loading rails environment..."
require_relative "../config/environment"
require "benchmark/ips"
require "sidekiq/cli"
# ActiveRecordQueryTrace.enabled = false #(ENV['ENABLE_QUERY_TRACE'].presence || 'false') == 'true'
ActiveRecord::Base.logger.level = Logger::ERROR

COUNT = (ARGV[0].presence || 1).to_i * 1000
TOTAL = "#{COUNT/1000}K"

def clear_queue_adapter(adapter)
  case adapter
  # when :active_job
    # ActiveJob::Job.delete_all
  when :delayed_job
    Delayed::Job.delete_all
  when :good_job
    ActiveRecord::Base.connection.execute("DELETE FROM public.good_jobs")
  when :que_job
    ActiveRecord::Base.connection.execute("DELETE FROM public.que_jobs")
  when :sidekiq
    Sidekiq::Queue.new(:benchmarks).clear
  else
    raise "NOT IMPLEMENTED"
  end
end

def queue_is_empty_adapter?(adapter)
  case adapter
  # when :active_job
    # ActiveJob::Job.delete_all
  when :delayed_job
    ActiveRecord::Base.connection.execute("SELECT COUNT(*) FROM public.delayed_jobs").first["count"] == 0
  when :good_job
    ActiveRecord::Base.connection.execute("SELECT COUNT(*) FROM public.good_jobs").first["count"] == 0
  when :que_job
    ActiveRecord::Base.connection.execute("SELECT COUNT(*) FROM public.que_jobs").first["count"] == 0
  when :sidekiq
    Sidekiq::Queue.new(:benchmarks).size == 0
  else
    raise "NOT IMPLEMENTED"
  end
end

def with_adapter(adapter, job)
  clear_queue_adapter(adapter)
  log_message "Starting #{adapter}..."
  pid = spawn(job[2], out: "/dev/null", err: "/dev/null")

  log_message "Wait until #{adapter} worker is ready..."
  job[0].send(job[1])
  loop do
    break if queue_is_empty_adapter?(adapter)
    sleep 0.01
  end
  log_message "#{adapter}} worker is now ready (pid: #{pid})"

  yield
ensure
  log_message "Terminating #{adapter} (pid = #{pid}) ..."
  Process.kill("TERM", pid)
end

adapters ={
  # active_job: [ExampleJob, :perform_later],
  delayed_job: [ExampleDelayedJob, :perform_later, "bundle exec rake jobs:work"],
  good_job: [ExampleGoodJob, :perform_later, "bundle exec good_job start"],
  que_job: [ExampleQueJob, :enqueue, "bundle exec que -q benchmarks -p 1"],
  # que_job: [ExampleQueJob, :enqueue, "parallel -j 8 bundle exec que -w ::: 12 ::: -q ::: benchmarks"], #Esto fue para probar el paralelismo con 8 procesos y 12 workers
  sidekiq: [ExampleWorker, :perform_async, "bundle e sidekiq -c 1 -q benchmarks"]
}
log_message "===== Enqueuing jobs"
log_message "=== Warmup"
ExampleQueJob.enqueue
ExampleWorker.perform_async

def benchmark_v1(adapters)
  results = {}
  adapters.each do |adapter, job|
    benchmark = "Enqueuing #{TOTAL} #{adapter.to_s.camelcase} jobs"
    log_message "=== #{benchmark}"
    clear_queue_adapter(adapter)
    results[benchmark] = Benchmark.measure do
      COUNT.times do |i|
        job[0].send(job[1])
      end
    end.real.round(2)
    log_message "Duration: #{results[benchmark]} seconds"  
  end
  
  adapters.each do |adapter, job|
    log_message "===== Enqueuing and processing jobs"
    benchmark = "Enqueuing & processing #{TOTAL} #{adapter} jobs"
    log_message "=== #{benchmark}"
    with_adapter(adapter, job) do
      results[benchmark] = Benchmark.measure do
        COUNT.times do
          job[0].send(job[1])
        end
        loop do
          break if queue_is_empty_adapter?(adapter)
          sleep 0.1
        end
      end.real.round(2)
    end
    log_message "Duration: #{results[benchmark]} seconds"
  end
  
  puts "=" * 20
  puts "Results:"
  results.each do |metric, duration|
    puts "#{metric} => #{duration}sec => throughput: #{(COUNT/duration).round} jobs/sec"
  end
end

def enqueue_benchmark(adapter, job)
  COUNT.times do |i|
    job[0].send(job[1])
  end
end

def processing_benchmark(adapter, job)
  with_adapter(adapter, job) do
    COUNT.times do
      job[0].send(job[1])
    end
    loop do
      break if queue_is_empty_adapter?(adapter)
      sleep 0.1
    end
  end
end

def benchmark_v2(adapters)
  puts "-" * 20
  puts "E L A P S E D  T I M E"

  puts "-" * 20
  puts "Enqueuing #{TOTAL} Jobs"

  Benchmark.bmbm do |x|
    adapters.each do |adapter, job|
      x.report (adapter.to_s.camelcase) { enqueue_benchmark(adapter, job) }
    end
  end

  puts "-" * 20
  puts "Enqueuing & Procesing #{TOTAL} Jobs"

  Benchmark.bmbm do |x|
    adapters.each do |adapter, job|
      x.report (adapter.to_s.camelcase) { processing_benchmark(adapter, job) }
    end
  end

  puts "-" * 20
  puts "M E M O R Y"
  puts "-" * 20
  puts "Enqueuing #{TOTAL} Jobs"

  Benchmark.memory do |x|
    adapters.each do |adapter, job|
      x.report (adapter.to_s.camelcase) { enqueue_benchmark(adapter, job) }
    end
  end

  puts "-" * 20
  puts "Enqueuing & Procesing #{TOTAL} Jobs"

  Benchmark.memory do |x|
    adapters.each do |adapter, job|
      x.report (adapter.to_s.camelcase) { processing_benchmark(adapter, job) }
    end
  end

  puts "-" * 20
  puts "I T E R A T I O N S  P E R  S E C O N D S"

  puts "-" * 20
  puts "Enqueuing #{TOTAL} Jobs"

  Benchmark.ips do |x|
    adapters.each do |adapter, job|
      x.report (adapter.to_s.camelcase) { enqueue_benchmark(adapter, job) }
    end
    x.compare!
  end

  puts "-" * 20
  puts "Enqueuing & Pocesing #{TOTAL} Jobs"

  Benchmark.ips do |x|
    adapters.each do |adapter, job|
      x.report (adapter.to_s.camelcase) { processing_benchmark(adapter, job) }
    end
    x.compare!
  end
end

ARGV[1].present? ? benchmark_v2(adapters) : benchmark_v1(adapters)

